---
import { Image } from "astro:assets";
import Lightbox from "./Lightbox.astro";

interface Props {
  path: string;
  type?: "thumbs" | "grid" | "masonry";
  maxCols?: number;
  responsive?: boolean;
  gap?: number; // ✅ neue Option für grid-gap
}

const { path, type = "thumbs", maxCols = 4, responsive = true, gap = 2 } = Astro.props;

const allImages = import.meta.glob(
  "../assets/images/gallery/**/*.{jpg,jpeg,png,webp}",
  { eager: true, import: "default" }
);

// alphabetisch sortieren
const imageList = Object.entries(allImages)
  .filter(([file]) => file.includes(`/gallery/${path}/`))
  .sort(([a], [b]) => a.localeCompare(b, undefined, { numeric: true }))
  .map(([_, mod]) => mod);

const galleryId = `gallery-${path}`;

// Builder für Grid-Variante
function buildGridClasses(max: number, responsive: boolean, gap: number) {
  if (!responsive) {
    return `grid gap-${gap} grid-cols-${max}`;
  }
  return [
    "grid",
    `gap-${gap}`,
    `grid-cols-${Math.max(1, max - 4)}`,
    `sm:grid-cols-${Math.max(1, max - 3)}`,
    `md:grid-cols-${Math.max(1, max - 2)}`,
    `lg:grid-cols-${Math.max(1, max - 1)}`,
    `xl:grid-cols-${max}`,
  ].join(" ");
}

// Builder für Masonry (columns-*)
function buildMasonryClasses(max: number, responsive: boolean, gap: number) {
  if (!responsive) {
    return `columns-${max} gap-${gap}`;
  }
  return [
    `columns-${Math.max(1, max - 4)}`,
    `sm:columns-${Math.max(1, max - 3)}`,
    `md:columns-${Math.max(1, max - 2)}`,
    `lg:columns-${Math.max(1, max - 1)}`,
    `xl:columns-${max}`,
    `gap-${gap}`,
  ].join(" ");
}

const gridClasses = buildGridClasses(maxCols, responsive, gap);
const masonryClasses = buildMasonryClasses(maxCols, responsive, gap);
---

<div id={galleryId} class="w-full mb-8">
  {type === "grid" && (
    <div class={gridClasses}>
      {imageList.map((img) => (
        <Image
          src={img}
          alt=""
          loading="lazy"
          decoding="async"
          widths={[400, 800, 1200]}
          sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
          class="w-full h-auto object-cover"
        />
      ))}
    </div>
  )}

  {type === "masonry" && (
    <div class={masonryClasses}>
      {imageList.map((img) => (
        <Image
          src={img}
          alt=""
          loading="lazy"
          decoding="async"
          widths={[400, 800, 1200]}
          sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
          class={`mb-${gap} w-full break-inside-avoid object-cover`}
        />
      ))}
    </div>
  )}

  {type === "thumbs" && (
    <>
      <!-- Aktives Bild -->
      <div
        class="relative w-full mb-1"
        style={`aspect-ratio: ${imageList[0].width} / ${imageList[0].height};`}
      >
        {imageList.map((img, i) => (
          <Image
            src={img}
            alt=""
            loading={i === 0 ? "eager" : "lazy"}
            decoding="async"
            widths={[640, 1024, 1600]}
            sizes="(max-width: 640px) 100vw, (max-width: 1024px) 90vw, 70vw"
            class={`absolute inset-0 m-auto max-h-full max-w-full object-contain ${
              i === 0 ? "opacity-100" : "opacity-0"
            }`}
            data-index={i}
          />
        ))}
      </div>

      <!-- Thumbnails -->
      <div class="flex flex-wrap gap-1 no-lightbox">
        {imageList.map((img, index) => (
          <button
            type="button"
            class="flex-shrink-0 cursor-pointer opacity-50 border-transparent"
            data-index={index}
          >
            <Image
              src={img}
              alt=""
              loading="lazy"
              decoding="async"
              widths={[150, 300]}
              sizes="150px"
              class="block w-32 h-24 object-cover"
            />
          </button>
        ))}
      </div>
    </>
  )}
</div>

{type === "thumbs" && (
  <script>
    window.addEventListener("DOMContentLoaded", () => {
      let activeGallery = null;
      let currentIndex = 0;

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              activeGallery = entry.target;
              currentIndex = 0;
            }
          });
        },
        { threshold: 0.5 }
      );

      document.querySelectorAll("[id^='gallery-']").forEach((gallery) => {
        const bigImages = gallery.querySelectorAll("img[data-index]");
        const buttons = gallery.querySelectorAll("button[data-index]");

        function showImage(idx) {
          currentIndex = idx;
          bigImages.forEach((img) => {
            img.classList.toggle("opacity-100", parseInt(img.dataset.index) === idx);
            img.classList.toggle("opacity-0", parseInt(img.dataset.index) !== idx);
          });
          buttons.forEach((b) => b.classList.remove("opacity-100"));
          if (buttons[idx]) buttons[idx].classList.add("opacity-100");
        }

        buttons.forEach((btn) => {
          btn.addEventListener("click", () => {
            const idx = parseInt(btn.dataset.index);
            showImage(idx);
            activeGallery = gallery;
          });
        });

        if (buttons.length > 0) {
          showImage(0);
        }

        observer.observe(gallery);
      });

      document.addEventListener("keydown", (e) => {
        if (!activeGallery) return;
        const bigImages = activeGallery.querySelectorAll("img[data-index]");
        const buttons = activeGallery.querySelectorAll("button[data-index]");

        if (e.key === "ArrowRight") {
          e.preventDefault();
          const nextIndex = (currentIndex + 1) % bigImages.length;
          buttons[nextIndex]?.click();
        }
        if (e.key === "ArrowLeft") {
          e.preventDefault();
          const prevIndex = (currentIndex - 1 + bigImages.length) % bigImages.length;
          buttons[prevIndex]?.click();
        }
      });
    });
  </script>
)}
