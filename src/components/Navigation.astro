---
import ThemeToggle from "../components/ThemeToggle.astro";

let currentPath = Astro.url.pathname;
if (!currentPath.endsWith("/")) currentPath += "/";

const modules = import.meta.glob("../pages/**/*.{astro,mdx}", { eager: true });

const navPages = Object.entries(modules)
  .map(([path, m]: any) => {
    let url = m.url?.endsWith("/") ? m.url : m.url + "/";
    let parts = url.split("/").filter(Boolean);

    // Index-Dateien normalisieren (/intro/intro → /intro/)
    if (
      parts.length > 1 &&
      parts[parts.length - 1] === parts[parts.length - 2]
    ) {
      parts = parts.slice(0, -1);
      url = "/" + parts.join("/") + "/";
    }

    let parent = null;
    if (parts.length > 1) {
      parent = "/" + parts.slice(0, -1).join("/") + "/";
    }

    return {
      url,
      title: m.frontmatter?.title || parts[parts.length - 1],
      parent,
      order: m.frontmatter?.order || 0,
    };
  })
  .filter((p) => p.title);

const children: Record<string, any[]> = {};
for (const page of navPages) {
  if (page.parent) {
    children[page.parent] ??= [];
    children[page.parent].push(page);
  }
}

const rootPages = navPages
  .filter((p) => !p.parent)
  .sort((a, b) => a.order - b.order);
---

<nav class="font-mono space-y-2">
  {rootPages.map((page) => (
    <div class="mt-4">
      <div class="mb-2">
        <a href={page.url} class="font-bold hover:font-bold">
          {page.title}
        </a>
      </div>

      {children[page.url] && (
        <ul>
          {children[page.url]
            .sort((a, b) => a.order - b.order)
            .map((child, idx, arr) => {
              const isLast = idx === arr.length - 1;
              const hasGrandchildren = children[child.url] ?? [];
              const isActiveBranch =
                currentPath.startsWith(child.url) ||
                hasGrandchildren.some((grand) =>
                  currentPath.startsWith(grand.url),
                );

              return (
                <li
                  class={`relative pl-2 -mb-2.5 pb-4 ${
                    !isLast
                      ? "border-l border-zinc-900 dark:border-zinc-100"
                      : ""
                  }`}
                >
                  <span class="absolute top-2.5 left-0 h-px w-2 bg-zinc-900 dark:bg-zinc-100" />

                  <a
                    href={child.url}
                    class={`hover:font-bold ml-1 ${
                      currentPath === child.url ? "underline" : ""
                    }`}
                  >
                    {child.title}
                  </a>

                  {children[child.url] && isActiveBranch && (
                    <ul class="pl-2">
                      {children[child.url]
                        .sort((a, b) => a.order - b.order)
                        .map((grand, gidx, garr) => {
                          const gLast = gidx === garr.length - 1;
                          return (
                            <li
                              class={`relative pl-3 -mb-2.5 pb-3 ${
                                !gLast
                                  ? "border-l border-zinc-900 dark:border-zinc-100"
                                  : ""
                              }`}
                            >
                              <span class="absolute top-2.5 left-0 h-px w-2 bg-zinc-900 dark:bg-zinc-100" />
                              <a
                                href={grand.url}
                                class={`hover:font-bold text-xs ${
                                  currentPath === grand.url ? "underline" : ""
                                }`}
                              >
                                {grand.title}
                              </a>
                            </li>
                          );
                        })}
                    </ul>
                  )}
                </li>
              );
            })}
        </ul>
      )}
    </div>
  ))}

  <div class="mt-6 text-sm">
    <h3 class="font-bold mb-2"></h3>
    <ul id="headings-nav" class="mb-2"></ul>
  </div>
</nav>
<!-- <div class="mt-4">
  <ThemeToggle />
</div> -->
<!-- On-page Headings -->

<div class="mt-6 text-sm">
  <ul id="headings-nav" class="mb-2"></ul>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.querySelector("#headings-nav");
    if (!container) return;

    const h2s = document.querySelectorAll("main h2");
    const links = [];

    h2s.forEach((h2) => {
      let id = h2.id;
      if (!id) {
        id = h2.textContent
          .toLowerCase()
          .replace(/\s+/g, "-")
          .replace(/[^a-z0-9-]/g, "");
        h2.id = id;
      }

      const li = document.createElement("li");
      li.innerHTML = `
        <a href="#${id}"
           class="relative block mb-2 pl-4
                  text-zinc-400 before:content-['#'] 
                  before:absolute before:left-0 
                  hover:bold">
          ${h2.textContent}
        </a>`;
      container.appendChild(li);

      const el = li.querySelector("a");
      links.push({ id, el });

      // Klick-Handler → aktiven Link setzen
      el.addEventListener("click", () => {
        links.forEach((l) => {
          l.el.classList.remove("text-black", "dark:text-white", "font-bold");
          l.el.classList.add("text-zinc-400");
        });
        el.classList.remove("text-zinc-400");
        el.classList.add("text-black", "dark:text-white", "font-bold");
      });
    });

    // Intersection Observer → aktives Heading markieren
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const link = links.find((l) => l.id === entry.target.id);
          if (!link) return;

          if (entry.isIntersecting) {
            links.forEach((l) => {
              l.el.classList.remove("text-black", "dark:text-white", "font-bold");
              l.el.classList.add("text-zinc-400");
            });
            link.el.classList.remove("text-zinc-400");
            link.el.classList.add("text-black", "dark:text-white", "font-bold");
          }
        });
      },
      { rootMargin: "-40% 0px -40% 0px", threshold: 0 }
    );

    h2s.forEach((h2) => observer.observe(h2));
  });
</script>
