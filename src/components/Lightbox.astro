---
interface Props {
    images?: string[];
}

let { images = [] } = Astro.props;
const imagesJSON = JSON.stringify(images);
---

<div
    id="lightbox"
    data-images={imagesJSON}
    class="hidden fixed inset-0 bg-black/80 flex items-center justify-center z-50"
>
    <button
        id="lightbox-close"
        class="absolute top-4 right-4 text-white hover:text-gray-300 transition-colors"
        aria-label="Close lightbox"
    >
        <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            class="w-8 h-8"
        >
            <path
                d="M5 5h2v2H5V5zm4 4H7V7h2v2zm2 2H9V9h2v2zm2 0h-2v2H9v2H7v2H5v2h2v-2h2v-2h2v-2h2v2h2v2h2v2h2v-2h-2v-2h-2v-2h-2v-2zm2-2v2h-2V9h2zm2-2v2h-2V7h2zm0 0V5h2v2h-2z"
                fill="currentColor"></path>
        </svg>
    </button>
    <button
        id="lightbox-prev"
        class="absolute left-4 text-white text-3xl hover:text-gray-300 transition-colors"
        aria-label="Previous image"
    >
        <svg fill="none" class="w-8 h-8" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"> <path d="M16 5v2h-2V5h2zm-4 4V7h2v2h-2zm-2 2V9h2v2h-2zm0 2H8v-2h2v2zm2 2v-2h-2v2h2zm0 0h2v2h-2v-2zm4 4v-2h-2v2h2z" fill="currentColor"/> </svg>
    </button>

    <img
        id="lightbox-img"
        src=""
        alt=""
        class="max-w-[90%] max-h-[90%] object-contain"
    />

    <button
        id="lightbox-next"
        class="absolute right-4 text-white text-3xl hover:text-gray-300 transition-colors"
        aria-label="Next image"
    >
        <svg fill="none" class="w-8 h-8" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"> <path d="M8 5v2h2V5H8zm4 4V7h-2v2h2zm2 2V9h-2v2h2zm0 2h2v-2h-2v2zm-2 2v-2h2v2h-2zm0 0h-2v2h2v-2zm-4 4v-2h2v2H8z" fill="currentColor"/> </svg>
        </svg>
    </button>
</div>

<script is:inline>
    window.addEventListener("DOMContentLoaded", () => {
        const lightbox = document.getElementById("lightbox");
        const lightboxImg = document.getElementById("lightbox-img");
        const btnClose = document.getElementById("lightbox-close");
        const btnPrev = document.getElementById("lightbox-prev");
        const btnNext = document.getElementById("lightbox-next");

        let images = [];
        try {
            images = JSON.parse(lightbox.dataset.images) || [];
        } catch {}

        if (!images.length) {
            const contentImgs = Array.from(
                  document.querySelectorAll("main img:not(.no-lightbox img)")
            );
            images = contentImgs.map((img) => img.src);

            contentImgs.forEach((img, i) => {
                img.addEventListener("click", () => show(i));
            });
        }

        let current = 0;

        function show(index) {
            current = (index + images.length) % images.length;
            lightboxImg.src = images[current];
            lightbox.classList.remove("hidden");

            // Theme-Toggle verstecken
            const themeToggle = document.getElementById("theme-toggle");
            if (themeToggle) themeToggle.style.opacity = "0";
        }

        function hide() {
            lightbox.classList.add("hidden");

            // Theme-Toggle wieder anzeigen
            const themeToggle = document.getElementById("theme-toggle");
            if (themeToggle) themeToggle.style.opacity = "1";
        }

        btnClose.addEventListener("click", hide);
        btnPrev.addEventListener("click", () => show(current - 1));
        btnNext.addEventListener("click", () => show(current + 1));

        // ❌ schließen bei Overlay-Click
        lightbox.addEventListener("click", (e) => {
            if (e.target === lightbox) hide();
        });

        document.addEventListener("keydown", (e) => {
            if (lightbox.classList.contains("hidden")) return;
            if (e.key === "Escape") hide();
            if (e.key === "ArrowLeft") show(current - 1);
            if (e.key === "ArrowRight") show(current + 1);
        });
    });
</script>
