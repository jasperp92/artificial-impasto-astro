---
import { Picture } from "astro:assets";
import type { ImageMetadata } from "astro";

interface Props {
  before: ImageMetadata;
  after: ImageMetadata;
  altBefore?: string;
  altAfter?: string;
  value?: number;
  maxWidth?: number | string;
  widths?: number[];
  sizes?: string;
}

const {
  before,
  after,
  altBefore = "Vorher",
  altAfter = "Nachher",
  value = 50,
  maxWidth = "1100px",
  widths = [480, 768, 1024, 1280, 1600],
  sizes = "(min-width: 1100px) 1100px, 100vw",
} = Astro.props;

const max = typeof maxWidth === "number" ? `${maxWidth}px` : maxWidth;
---

<div
  class="relative w-full select-none"
  style={`--split:${value}%; max-width:${max};`}
>
  <!-- Nachher -->
  <Picture
    src={after}
    alt={altAfter}
    widths={widths}
    sizes={sizes}
    formats={['avif','webp','jpeg']}
    class="block w-full h-auto"
  />

  <!-- Vorher -->
  <div
    class="absolute inset-0 overflow-hidden"
    style="clip-path: inset(0 calc(100% - var(--split, 50%)) 0 0);"
  >
    <Picture
      src={before}
      alt={altBefore}
      widths={widths}
      sizes={sizes}
      formats={['avif','webp','jpeg']}
      class="block w-full h-auto"
    />
  </div>

  <!-- Divider -->
<div
  class="absolute top-0 bottom-0 left-[var(--split,50%)] -translate-x-1/2 cursor-grab active:cursor-grabbing"
  role="slider"
  aria-valuemin="0"
  aria-valuemax="100"
  aria-valuenow={value}
  aria-label="Vergleichsregler"
  tabindex="0"
>
  <!-- schwarze Linie (1px nach links versetzt) -->
  <div class="absolute top-0 bottom-0 left-[calc(50%-1px)] w-[2px] bg-black z-20"></div>
  <!-- weiÃŸe Linie (1px nach rechts versetzt) -->
  <div class="absolute top-0 bottom-0 left-[calc(50%+1px)] w-[2px] bg-white z-30"></div>
  <!-- unsichtbare Grab-Zone -->
  <div class="absolute top-0 bottom-0 left-1/2 w-[30px] -translate-x-1/2 bg-transparent cursor-inherit z-10"></div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".relative.w-full.select-none").forEach((root) => {
      const divider = root.querySelector(".divider") || root.querySelector("[role=slider]");
      const set = (v) => {
        root.style.setProperty("--split", v + "%");
        divider.setAttribute("aria-valuenow", Math.round(v));
      };

      // Initial
      set(parseFloat(root.style.getPropertyValue("--split")) || 50);

      const updateFromClientX = (clientX) => {
        const rect = root.getBoundingClientRect();
        let v = ((clientX - rect.left) / rect.width) * 100;
        v = Math.max(0, Math.min(100, v));
        set(v);
      };

      // Drag
      let dragging = false;
      divider.addEventListener("pointerdown", (e) => {
        dragging = true;
        divider.setPointerCapture(e.pointerId);
        updateFromClientX(e.clientX);
      });
      divider.addEventListener("pointermove", (e) => {
        if (dragging) updateFromClientX(e.clientX);
      });
      divider.addEventListener("pointerup", (e) => {
        dragging = false;
        divider.releasePointerCapture(e.pointerId);
      });

      // Tastatur
      divider.addEventListener("keydown", (e) => {
        let v = parseFloat(root.style.getPropertyValue("--split")) || 50;
        const step = e.shiftKey ? 5 : 3;
        if (e.key === "ArrowLeft" || e.key === "ArrowDown") v -= step;
        if (e.key === "ArrowRight" || e.key === "ArrowUp") v += step;
        if (!isNaN(v)) set(Math.max(0, Math.min(100, v)));
      });
    });
  });
</script>
