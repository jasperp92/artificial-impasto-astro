---
const { frontmatter } = Astro.props;
const title = frontmatter?.title || "Artificial Impasto";
const background = frontmatter?.background || null;

import Footer from "../components/Footer.astro";
import Navigation from "../components/Navigation.astro";
import ThemeToggle from "../components/ThemeToggle.astro";
import "../styles/global.css";

console.log("Frontmatter:", frontmatter);

---

<html lang="de">
  <head>
    <meta charset="utf-8" />
    <title>{Astro.props.title || "Artificial Impasto"}</title>
      <script is:inline>
        const theme = localStorage.getItem('theme') || 'light';
        if (theme === 'dark') {
          document.documentElement.classList.add('dark');
        }
      </script>
<link rel="preload" href="/artificial-impasto/fonts/terminal-grotesque.woff2" as="font" type="font/woff2" crossorigin>
  <link rel="preload" href="/artificial-impasto/fonts/terminal-grotesque_open.woff2" as="font" type="font/woff2" crossorigin>
  </head>
  <body
  id="bg-scroll"
  class={`min-h-screen ${background ? "bg-cover bg-center bg-size-[120%]" : ""}`}
  style={background ? `background-image: url('${background}'); background-blend-mode: difference` : ""}>
    <div class="flex min-h-screen">
      <!-- Sidebar -->
      <aside
        class="hidden md:block fixed top-0 left-0 h-screen w-60 border-r-0 p-4"
      >
        <Navigation />
      </aside>

      <div class="fixed top-6 right-4">
        <ThemeToggle />
      </div>

      <!-- Main Content -->
      <main class="flex-1 mt-4 max-w-260 p-6 mr-0 md:ml-60 md:mr-12">
        <slot />
      </main>
    </div>
    <Footer />
  </body>
</html>

<!-- Hintergrund Bewegung -->
{background && (
  <script>
    const body = document.getElementById("bg-scroll");
    let ticking = false;

    window.addEventListener("scroll", () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          const offset = -20 + window.scrollY * 0.1;
          body.style.setProperty("background-position", `${offset}px center`);
          ticking = false;
        });
        ticking = true;
      }
    });
  </script>
)}


<!-- <script>
  window.addEventListener("afterprint", () => {
    if (window.Chart && Chart.registry && Chart.registry.instances) {
      // Alle aktiven Charts durchgehen und neu berechnen
      for (const chart of Chart.registry.instances.values()) {
        chart.resize();
        console.log('resize')
      }
    }
  });
</script> -->